---
export const prerender = false;
import BaseLayout from "@layouts/BaseLayout.astro";
import Input from "@components/UI/Input.astro";
import Button from "@components/UI/Button.astro";
import Alert from "@components/UI/Alert.astro";
import FormGroup from "@components/UI/FormGroup.astro";

// Check if user is already authenticated
const user = Astro.locals.user;
if (user) {
  return Astro.redirect("/");
}
---

<BaseLayout title="Inscription" description="Créez votre compte">
  <div class="auth-container">
    <div class="auth-card auth-card--wide">
      <div class="auth-header">
        <h1>Créer un compte</h1>
        <p>Rejoignez notre plateforme</p>
      </div>

      <form id="signup-form" class="auth-form">
        <div class="form-row">
          <FormGroup label="Nom complet" id="name" required>
            <Input
              type="text"
              id="name"
              name="name"
              placeholder="Votre nom complet"
              required
            />
          </FormGroup>
          
          <FormGroup label="Nom d'utilisateur" id="username" required helpText="3-20 caractères, lettres, chiffres et underscore uniquement">
            <Input
              type="text"
              id="username"
              name="username"
              placeholder="nom_utilisateur"
              pattern="[a-zA-Z0-9_]+"
              minlength="3"
              maxlength="20"
              required
            />
          </FormGroup>
        </div>

        <FormGroup label="Adresse email" id="email" required>
          <Input
            type="email"
            id="email"
            name="email"
            placeholder="votre@email.com"
            required
          />
        </FormGroup>

        <div class="form-row">
          <FormGroup label="Mot de passe" id="password" required>
            <Input
              type="password"
              id="password"
              name="password"
              placeholder="Mot de passe sécurisé"
              minlength="8"
              required
            />
            <div class="password-strength" id="password-strength"></div>
          </FormGroup>
          
          <FormGroup label="Confirmer le mot de passe" id="confirmPassword" required>
            <Input
              type="password"
              id="confirmPassword"
              name="confirmPassword"
              placeholder="Confirmer le mot de passe"
              required
            />
          </FormGroup>
        </div>

        <!-- Organization section (optional) -->
        <div class="form-section">
          <h3>Organisation (optionnel)</h3>
          <div class="form-group">
            <label>
              <input type="radio" name="orgOption" value="none" checked />
              Aucune organisation pour le moment
            </label>
          </div>
          <div class="form-group">
            <label>
              <input type="radio" name="orgOption" value="create" />
              Créer une nouvelle organisation
            </label>
          </div>
          <div class="form-group">
            <label>
              <input type="radio" name="orgOption" value="join" />
              Rejoindre une organisation existante
            </label>
          </div>
          
          <!-- Create organization fields -->
          <div id="create-org-fields" class="org-fields" style="display: none;">
            <FormGroup label="Nom de l'organisation" id="orgName">
              <Input
                type="text"
                id="orgName"
                name="orgName"
                placeholder="Mon entreprise"
              />
            </FormGroup>
            <FormGroup label="Identifiant unique" id="orgSlug" helpText="Lettres minuscules, chiffres et tirets uniquement">
              <Input
                type="text"
                id="orgSlug"
                name="orgSlug"
                placeholder="mon-entreprise"
                pattern="[a-z0-9-]+"
              />
            </FormGroup>
          </div>
          
          <!-- Join organization fields -->
          <div id="join-org-fields" class="org-fields" style="display: none;">
            <FormGroup label="Code d'invitation" id="inviteCode" helpText="Vous avez reçu ce code par email de la part de votre organisation">
              <Input
                type="text"
                id="inviteCode"
                name="inviteCode"
                placeholder="Code reçu par email"
              />
            </FormGroup>
          </div>
        </div>

        <div class="form-options">
          <label class="checkbox-label">
            <input type="checkbox" name="emailVerification" checked />
            <span>Vérifier mon email après l'inscription</span>
          </label>
        </div>

        <div class="form-options">
          <label class="checkbox-label">
            <input type="checkbox" name="terms" required />
            <span>J'accepte les <a href="/conditions" target="_blank" class="link">conditions d'utilisation</a></span>
          </label>
        </div>

        <Button type="submit" fullWidth>Créer mon compte</Button>

        <Alert variant="error" id="signup-error" style="display: none;" />
        <Alert variant="success" id="signup-success" style="display: none;" />
      </form>

      <div class="auth-footer">
        <p>Déjà un compte ? <a href="/connexion" class="link">Se connecter</a></p>
      </div>
    </div>
  </div>
</BaseLayout>

<!-- All styles now handled by theme.css -->

<script type="module">
  import { authClient } from "../src/lib/auth-client";
  import { mapErrorMessage, getSuccessMessage, getLoadingMessage } from "../src/lib/client/error-messages";

  // Organization option handling
  const orgOptions = document.querySelectorAll('input[name="orgOption"]');
  const createOrgFields = document.getElementById('create-org-fields');
  const joinOrgFields = document.getElementById('join-org-fields');

  orgOptions.forEach(option => {
    option.addEventListener('change', () => {
      createOrgFields.style.display = 'none';
      joinOrgFields.style.display = 'none';
      
      if (option.value === 'create') {
        createOrgFields.style.display = 'block';
      } else if (option.value === 'join') {
        joinOrgFields.style.display = 'block';
      }
    });
  });

  // Auto-generate slug from organization name
  const orgNameInput = document.getElementById('orgName');
  const orgSlugInput = document.getElementById('orgSlug');

  orgNameInput?.addEventListener('input', () => {
    const slug = orgNameInput.value
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .slice(0, 50);
    orgSlugInput.value = slug;
  });

  // Password strength checking
  const passwordInput = document.getElementById('password');
  const strengthDiv = document.getElementById('password-strength');

  passwordInput.addEventListener('input', () => {
    const password = passwordInput.value;
    const strength = calculatePasswordStrength(password);
    
    strengthDiv.className = 'password-strength ' + strength.class;
    strengthDiv.textContent = strength.text;
  });

  function calculatePasswordStrength(password) {
    if (password.length < 6) {
      return { class: 'weak', text: 'Mot de passe trop court' };
    }
    
    let score = 0;
    if (password.length >= 8) score++;
    if (/[a-z]/.test(password)) score++;
    if (/[A-Z]/.test(password)) score++;
    if (/\d/.test(password)) score++;
    if (/[^a-zA-Z\d]/.test(password)) score++;
    
    if (score < 3) {
      return { class: 'weak', text: 'Mot de passe faible' };
    } else if (score < 4) {
      return { class: 'medium', text: 'Mot de passe moyen' };
    } else {
      return { class: 'strong', text: 'Mot de passe fort' };
    }
  }

  // Error display functions
  function showError(message) {
    const errorElement = document.getElementById('signup-error');
    errorElement.textContent = message;
    errorElement.style.display = 'block';
    document.getElementById('signup-success').style.display = 'none';
  }

  function showSuccess(message) {
    const successElement = document.getElementById('signup-success');
    successElement.textContent = message;
    successElement.style.display = 'block';
    document.getElementById('signup-error').style.display = 'none';
  }

  function hideMessages() {
    document.getElementById('signup-error').style.display = 'none';
    document.getElementById('signup-success').style.display = 'none';
  }

  // Form submission
  document.getElementById('signup-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    hideMessages();
    
    const formData = new FormData(e.target);
    const password = formData.get('password');
    const confirmPassword = formData.get('confirmPassword');
    
    // Validate password match
    if (password !== confirmPassword) {
      showError('Les mots de passe ne correspondent pas');
      return;
    }
    
    const submitBtn = e.target.querySelector('button[type="submit"]');
    submitBtn.disabled = true;
    submitBtn.textContent = getLoadingMessage('signup');
    
    try {
      // Prepare signup data
      const signupData = {
        name: formData.get('name'),
        username: formData.get('username'),
        email: formData.get('email'),
        password: formData.get('password'),
        callbackURL: "/"
      };

      // Check if organization is being created
      const orgOption = formData.get('orgOption');
      if (orgOption === 'create') {
        signupData.organizationName = formData.get('orgName');
        signupData.organizationSlug = formData.get('orgSlug');
      }

      const { data, error } = await authClient.signUp.email(signupData);
      
      if (error) {
        showError(mapErrorMessage(error));
      } else {
        // Handle organization creation or joining
        if (orgOption === 'create' && data.user) {
          try {
            await authClient.organization.create({
              name: formData.get('orgName'),
              slug: formData.get('orgSlug')
            });
          } catch (orgError) {
            console.warn('Erreur création organisation:', orgError);
          }
        } else if (orgOption === 'join' && formData.get('inviteCode')) {
          try {
            await authClient.organization.acceptInvitation({
              invitationId: formData.get('inviteCode')
            });
          } catch (inviteError) {
            console.warn('Erreur acceptation invitation:', inviteError);
          }
        }

        // Check if email verification is requested
        if (formData.get('emailVerification') === 'on') {
          try {
            // Utilise le endpoint natif Better Auth
            await fetch('/email-otp/send-verification-otp', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ email: formData.get('email'), type: 'email-verification' })
            });
            // Toujours afficher un message générique
            showSuccess(getSuccessMessage('signup-verify'));
          } catch (verifyError) {
            showSuccess(getSuccessMessage('signup-verify'));
          }
        } else {
          showSuccess(getSuccessMessage('signup') + ' Redirection...');
          setTimeout(() => {
            window.location.href = "/";
          }, 2000);
        }
      }
    } catch (error) {
      showError(mapErrorMessage(error));
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = 'Créer mon compte';
    }
  });
</script>
---
export const prerender = false;
import BaseLayout from "@layouts/BaseLayout.astro";
import Input from "@components/UI/Input.astro";
import Button from "@components/UI/Button.astro";
import Alert from "@components/UI/Alert.astro";
import FormGroup from "@components/UI/FormGroup.astro";

// Check if user is already authenticated
const user = Astro.locals.user;
if (user) {
  return Astro.redirect("/");
}
---

<BaseLayout title="Mot de passe oublié" description="Réinitialisez votre mot de passe">
  <div class="auth-container">
    <div class="auth-card">
      <div class="auth-header">
        <h1>Mot de passe oublié</h1>
        <p>Nous allons vous envoyer un code pour réinitialiser votre mot de passe</p>
      </div>

      <!-- Step 1: Request OTP -->
      <div id="request-step" class="step-content">
        <form id="request-form" class="auth-form">
          <FormGroup label="Adresse email" id="email" required helpText="Entrez l'email associé à votre compte">
            <Input
              type="email"
              id="email"
              name="email"
              placeholder="votre@email.com"
              required
            />
          </FormGroup>
          
          <Button type="submit" fullWidth>Envoyer le code</Button>
          
          <Alert variant="error" id="request-error" style="display: none;" />
        </form>
      </div>

      <!-- Step 2: Verify OTP and Set New Password -->
      <div id="reset-step" class="step-content" style="display: none;">
        <form id="reset-form" class="auth-form">
          <FormGroup label="Code de vérification" id="otp" required helpText="Entrez le code reçu par email">
            <Input
              type="text"
              id="otp"
              name="otp"
              placeholder="000000"
              maxlength="6"
              pattern="[0-9]{6}"
              required
            />
          </FormGroup>
          
          <FormGroup label="Nouveau mot de passe" id="newPassword" required>
            <Input
              type="password"
              id="newPassword"
              name="newPassword"
              placeholder="Nouveau mot de passe sécurisé"
              minlength="8"
              required
            />
            <div class="password-strength" id="password-strength"></div>
          </FormGroup>
          
          <FormGroup label="Confirmer le mot de passe" id="confirmPassword" required>
            <Input
              type="password"
              id="confirmPassword"
              name="confirmPassword"
              placeholder="Confirmez votre nouveau mot de passe"
              required
            />
          </FormGroup>
          
          <Button type="submit" fullWidth>Réinitialiser le mot de passe</Button>
          <Button type="button" variant="secondary" fullWidth id="back-btn">Retour</Button>
          
          <Alert variant="error" id="reset-error" style="display: none;" />
        </form>
      </div>

      <!-- Step 3: Success -->
      <div id="success-step" class="step-content" style="display: none;">
        <div class="success-message">
          <div class="success-icon">✅</div>
          <h2>Mot de passe réinitialisé !</h2>
          <p>Votre mot de passe a été mis à jour avec succès.</p>
          <Button href="/connexion" fullWidth>Se connecter</Button>
        </div>
      </div>

      <div class="auth-footer">
        <p>Vous vous souvenez de votre mot de passe ? <a href="/connexion" class="link">Se connecter</a></p>
        <p>Pas encore de compte ? <a href="/inscription" class="link">Créer un compte</a></p>
      </div>
    </div>
  </div>
</BaseLayout>

<!-- All styles now handled by theme.css -->

<style>
  /* Custom styles for success message */
  .success-message {
    text-align: center;
    padding: var(--space-2xl);
  }

  .success-icon {
    font-size: var(--font-size-4xl);
    margin-bottom: var(--space-lg);
  }

  .success-message h2 {
    margin: 0 0 var(--space-lg);
    color: var(--c-success);
    font-size: var(--font-size-2xl);
    font-weight: var(--font-weight-bold);
  }

  .success-message p {
    margin: 0 0 var(--space-2xl);
    color: var(--c-foreground-muted);
    font-size: var(--font-size-base);
  }
</style>

<script>
  import { authClient } from "@lib/auth-client";

  let currentEmail = '';

  // Password strength checking
  const passwordInput = document.getElementById('newPassword');
  const strengthDiv = document.getElementById('password-strength');

  passwordInput?.addEventListener('input', () => {
    const password = passwordInput.value;
    const strength = calculatePasswordStrength(password);
    
    strengthDiv.className = 'password-strength ' + strength.class;
    strengthDiv.textContent = strength.text;
  });

  function calculatePasswordStrength(password) {
    if (password.length < 6) {
      return { class: 'weak', text: 'Mot de passe trop court' };
    }
    
    let score = 0;
    if (password.length >= 8) score++;
    if (/[a-z]/.test(password)) score++;
    if (/[A-Z]/.test(password)) score++;
    if (/\d/.test(password)) score++;
    if (/[^a-zA-Z\d]/.test(password)) score++;
    
    if (score < 3) {
      return { class: 'weak', text: 'Mot de passe faible' };
    } else if (score < 4) {
      return { class: 'medium', text: 'Mot de passe moyen' };
    } else {
      return { class: 'strong', text: 'Mot de passe fort' };
    }
  }

  // Error display functions
  function showError(elementId, message) {
    const errorElement = document.getElementById(elementId);
    errorElement.textContent = message;
    errorElement.style.display = 'block';
  }

  function hideError(elementId) {
    const errorElement = document.getElementById(elementId);
    errorElement.style.display = 'none';
  }

  // Show specific step
  function showStep(stepId) {
    const steps = ['request-step', 'reset-step', 'success-step'];
    steps.forEach(id => {
      document.getElementById(id).style.display = id === stepId ? 'block' : 'none';
    });
  }

  // Step 1: Request OTP
  document.getElementById('request-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    hideError('request-error');
    
    const formData = new FormData(e.target);
    const email = formData.get('email');
    currentEmail = email;
    
    const submitBtn = e.target.querySelector('button[type="submit"]');
    submitBtn.disabled = true;
    submitBtn.textContent = 'Envoi...';
    
    try {
      const { data, error } = await authClient.sendVerificationOtp({
        email,
        type: "forgot-password"
      });
      
      if (error) {
        showError('request-error', error.message || 'Erreur lors de l\'envoi du code');
      } else {
        showStep('reset-step');
      }
    } catch (error) {
      showError('request-error', 'Erreur lors de l\'envoi du code');
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = 'Envoyer le code';
    }
  });

  // Step 2: Verify OTP and Reset Password
  document.getElementById('reset-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    hideError('reset-error');
    
    const formData = new FormData(e.target);
    const otp = formData.get('otp');
    const newPassword = formData.get('newPassword');
    const confirmPassword = formData.get('confirmPassword');
    
    // Validate password match
    if (newPassword !== confirmPassword) {
      showError('reset-error', 'Les mots de passe ne correspondent pas');
      return;
    }
    
    const submitBtn = e.target.querySelector('button[type="submit"]');
    submitBtn.disabled = true;
    submitBtn.textContent = 'Réinitialisation...';
    
    try {
      const { data, error } = await authClient.resetPassword({
        newPassword,
        otp
      });
      
      if (error) {
        showError('reset-error', error.message || 'Code invalide ou expiré');
      } else {
        showStep('success-step');
      }
    } catch (error) {
      showError('reset-error', 'Code invalide ou expiré');
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = 'Réinitialiser le mot de passe';
    }
  });

  // Back button
  document.getElementById('back-btn').addEventListener('click', () => {
    showStep('request-step');
    hideError('reset-error');
  });
</script>
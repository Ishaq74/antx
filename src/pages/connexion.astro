---
export const prerender = false;
import BaseLayout from "@layouts/BaseLayout.astro";
import Input from "@components/UI/Input.astro";
import Button from "@components/UI/Button.astro";
import Alert from "@components/UI/Alert.astro";
import FormGroup from "@components/UI/FormGroup.astro";

// Check if user is already authenticated
const user = Astro.locals.user;
if (user) {
  return Astro.redirect("/");
}
---

<BaseLayout title="Connexion" description="Connectez-vous à votre compte">
  <div class="auth-container">
    <div class="auth-card">
      <div class="auth-header">
        <h1>Se connecter</h1>
        <p>Accédez à votre compte</p>
      </div>

      <div class="auth-tabs">
        <button class="tab-btn active" data-tab="email">Email</button>
        <button class="tab-btn" data-tab="username">Nom d'utilisateur</button>
        <button class="tab-btn" data-tab="otp">Code OTP</button>
      </div>

      <!-- Email/Password Form -->
      <div class="tab-content active" id="email-tab">
        <form id="email-form" class="auth-form">
          <FormGroup label="Adresse email" id="email" required>
            <Input
              type="email"
              id="email"
              name="email"
              placeholder="votre@email.com"
              required
            />
          </FormGroup>
          
          <FormGroup label="Mot de passe" id="password" required>
            <Input
              type="password"
              id="password"
              name="password"
              placeholder="Votre mot de passe"
              required
            />
          </FormGroup>
          
          <div class="form-options">
            <label class="checkbox-label">
              <input type="checkbox" name="rememberMe" checked />
              <span>Se souvenir de moi</span>
            </label>
            <a href="/mot-de-passe-oublie" class="link link--small">Mot de passe oublié ?</a>
          </div>
          
          <Button type="submit" fullWidth>Se connecter</Button>
          
          <Alert variant="error" id="email-error" style="display: none;" />
          <Alert variant="success" id="email-success" style="display: none;" />
        </form>
      </div>

      <!-- Username/Password Form -->
      <div class="tab-content" id="username-tab">
        <form id="username-form" class="auth-form">
          <FormGroup label="Nom d'utilisateur" id="username" required>
            <Input
              type="text"
              id="username"
              name="username"
              placeholder="votre_nom_utilisateur"
              required
            />
          </FormGroup>
          
          <FormGroup label="Mot de passe" id="password-username" required>
            <Input
              type="password"
              id="password-username"
              name="password"
              placeholder="Votre mot de passe"
              required
            />
          </FormGroup>
          
          <div class="form-options">
            <label class="checkbox-label">
              <input type="checkbox" name="rememberMe" checked />
              <span>Se souvenir de moi</span>
            </label>
            <a href="/mot-de-passe-oublie" class="link link--small">Mot de passe oublié ?</a>
          </div>
          
          <Button type="submit" fullWidth>Se connecter</Button>
          
          <Alert variant="error" id="username-error" style="display: none;" />
          <Alert variant="success" id="username-success" style="display: none;" />
        </form>
      </div>

      <!-- Email OTP Form -->
      <div class="tab-content" id="otp-tab">
        <form id="otp-request-form" class="auth-form">
          <p class="otp-description">
            Recevez un code de connexion sécurisé par email
          </p>
          
          <FormGroup label="Adresse email" id="otp-email" required>
            <Input
              type="email"
              id="otp-email"
              name="email"
              placeholder="votre@email.com"
              required
            />
          </FormGroup>
          
          <Button type="submit" fullWidth>Envoyer le code</Button>
          
          <Alert variant="error" id="otp-error" style="display: none;" />
          <Alert variant="success" id="otp-success" style="display: none;" />
        </form>

        <!-- OTP Verification Form (hidden initially) -->
        <form id="otp-verify-form" class="auth-form" style="display: none;">
          <p class="otp-description">
            Entrez le code reçu par email
          </p>
          
          <FormGroup label="Code de vérification" id="otp-code" required>
            <Input
              type="text"
              id="otp-code"
              name="otp"
              placeholder="000000"
              maxlength="6"
              pattern="[0-9]{6}"
              required
            />
          </FormGroup>
          
          <Button type="submit" fullWidth>Vérifier le code</Button>
          <Button type="button" variant="secondary" fullWidth id="back-to-email">Retour</Button>
          
          <Alert variant="error" id="otp-verify-error" style="display: none;" />
          <Alert variant="success" id="otp-verify-success" style="display: none;" />
        </form>
      </div>

      <div class="auth-footer">
        <p>Pas encore de compte ? <a href="/inscription" class="link">Créer un compte</a></p>
      </div>
    </div>
  </div>
</BaseLayout>

<!-- All styles now handled by theme.css -->

<script>
  import { authClient } from "@lib/auth-client";
  import { mapErrorMessage, getSuccessMessage, getLoadingMessage } from "@lib/error-messages";

  // Tab switching functionality
  const tabBtns = document.querySelectorAll('.tab-btn');
  const tabContents = document.querySelectorAll('.tab-content');

  tabBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const tabId = btn.dataset.tab;
      
      // Remove active class from all tabs and contents
      tabBtns.forEach(b => b.classList.remove('active'));
      tabContents.forEach(c => c.classList.remove('active'));
      
      // Add active class to clicked tab and corresponding content
      btn.classList.add('active');
      document.getElementById(tabId + '-tab').classList.add('active');
    });
  });

  // Error and success display functions
  function showError(elementId, message) {
    const errorElement = document.getElementById(elementId);
    errorElement.textContent = message;
    errorElement.style.display = 'block';
    
    // Hide corresponding success message
    const successElementId = elementId.replace('-error', '-success');
    const successElement = document.getElementById(successElementId);
    if (successElement) {
      successElement.style.display = 'none';
    }
  }

  function hideError(elementId) {
    const errorElement = document.getElementById(elementId);
    errorElement.style.display = 'none';
  }

  function showSuccess(elementId, message) {
    const successElement = document.getElementById(elementId);
    if (successElement) {
      successElement.textContent = message;
      successElement.style.display = 'block';
      
      // Hide corresponding error message
      const errorElementId = elementId.replace('-success', '-error');
      const errorElement = document.getElementById(errorElementId);
      if (errorElement) {
        errorElement.style.display = 'none';
      }
    }
  }

  // Email/Password Sign In
  document.getElementById('email-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    hideError('email-error');
    
    const formData = new FormData(e.target);
    const email = formData.get('email');
    const password = formData.get('password');
    const rememberMe = formData.get('rememberMe') === 'on';
    
    const submitBtn = e.target.querySelector('button[type="submit"]');
    submitBtn.disabled = true;
    submitBtn.textContent = getLoadingMessage('signin');
    
    try {
      const { data, error } = await authClient.signIn.email({
        email,
        password,
        rememberMe,
        callbackURL: "/"
      });
      
      if (error) {
        showError('email-error', mapErrorMessage(error));
      } else {
        window.location.href = "/";
      }
    } catch (error) {
      showError('email-error', mapErrorMessage(error));
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = 'Se connecter';
    }
  });

  // Username/Password Sign In
  document.getElementById('username-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    hideError('username-error');
    
    const formData = new FormData(e.target);
    const username = formData.get('username');
    const password = formData.get('password');
    const rememberMe = formData.get('rememberMe') === 'on';
    
    const submitBtn = e.target.querySelector('button[type="submit"]');
    submitBtn.disabled = true;
    submitBtn.textContent = getLoadingMessage('signin');
    
    try {
      const { data, error } = await authClient.signIn.username({
        username,
        password,
        rememberMe,
        callbackURL: "/"
      });
      
      if (error) {
        showError('username-error', mapErrorMessage(error));
      } else {
        window.location.href = "/";
      }
    } catch (error) {
      showError('username-error', mapErrorMessage(error));
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = 'Se connecter';
    }
  });

  // OTP Request
  document.getElementById('otp-request-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    hideError('otp-error');
    
    const formData = new FormData(e.target);
    const email = formData.get('email');
    
    const submitBtn = e.target.querySelector('button[type="submit"]');
    submitBtn.disabled = true;
    submitBtn.textContent = getLoadingMessage('otp-sending');
    
    try {
      const { data, error } = await authClient.sendVerificationOtp({
        email,
        type: "sign-in"
      });
      
      if (error) {
        showError('otp-error', mapErrorMessage(error));
      } else {
        showSuccess('otp-success', getSuccessMessage('otp-sent'));
        // Show verification form
        document.getElementById('otp-request-form').style.display = 'none';
        document.getElementById('otp-verify-form').style.display = 'block';
      }
    } catch (error) {
      showError('otp-error', mapErrorMessage(error));
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = 'Envoyer le code';
    }
  });

  // OTP Verification
  document.getElementById('otp-verify-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    hideError('otp-verify-error');
    
    const formData = new FormData(e.target);
    const otp = formData.get('otp');
    const email = document.getElementById('otp-email').value;
    
    const submitBtn = e.target.querySelector('button[type="submit"]');
    submitBtn.disabled = true;
    submitBtn.textContent = getLoadingMessage('otp-verifying');
    
    try {
      const { data, error } = await authClient.signIn.emailOtp({
        email,
        otp
      });
      
      if (error) {
        showError('otp-verify-error', mapErrorMessage(error));
      } else {
        window.location.href = "/";
      }
    } catch (error) {
      showError('otp-verify-error', mapErrorMessage(error));
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = 'Vérifier le code';
    }
  });

  // Back to email button
  document.getElementById('back-to-email').addEventListener('click', () => {
    document.getElementById('otp-verify-form').style.display = 'none';
    document.getElementById('otp-request-form').style.display = 'block';
    hideError('otp-verify-error');
    hideError('otp-error');
    document.getElementById('otp-success').style.display = 'none';
    document.getElementById('otp-verify-success').style.display = 'none';
  });
</script>